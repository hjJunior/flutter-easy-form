import 'package:flutter/material.dart';

class TextFieldFactory {
  static TextField copyFromWith(
    TextField textField, {
    @required TextEditingController controller,
    String errorText,
  }) {
    return TextField(
      controller: controller,
      focusNode: textField.focusNode,
      decoration: InputDecorationFactory.copyFromWith(
        textField.decoration,
        errorText: errorText,
      ),
      keyboardType: textField.keyboardType,
      textInputAction: textField.textInputAction,
      textCapitalization: textField.textCapitalization,
      style: textField.style,
      strutStyle: textField.strutStyle,
      textAlign: textField.textAlign,
      textAlignVertical: textField.textAlignVertical,
      textDirection: textField.textDirection,
      autofocus: textField.autofocus,
      obscureText: textField.obscureText,
      autocorrect: textField.autocorrect,
      smartDashesType: textField.smartDashesType,
      smartQuotesType: textField.smartQuotesType,
      enableSuggestions: textField.enableSuggestions,
      maxLines: textField.maxLines,
      minLines: textField.minLines,
      expands: textField.expands,
      readOnly: textField.readOnly,
      toolbarOptions: textField.toolbarOptions,
      showCursor: textField.showCursor,
      maxLength: textField.maxLength,
      maxLengthEnforced: textField.maxLengthEnforced,
      onChanged: textField.onChanged,
      onEditingComplete: textField.onEditingComplete,
      onSubmitted: textField.onSubmitted,
      inputFormatters: textField.inputFormatters,
      enabled: textField.enabled,
      cursorWidth: textField.cursorWidth,
      cursorRadius: textField.cursorRadius,
      cursorColor: textField.cursorColor,
      selectionHeightStyle: textField.selectionHeightStyle,
      selectionWidthStyle: textField.selectionWidthStyle,
      keyboardAppearance: textField.keyboardAppearance,
      scrollPadding: textField.scrollPadding,
      enableInteractiveSelection: textField.enableInteractiveSelection,
      dragStartBehavior: textField.dragStartBehavior,
      onTap: textField.onTap,
      buildCounter: textField.buildCounter,
      scrollPhysics: textField.scrollPhysics,
      scrollController: textField.scrollController,
    );
  }
}

class InputDecorationFactory {
  static InputDecoration copyFromWith(
    InputDecoration inputDecoration, {
    String errorText,
  }) {
    return InputDecoration(
      icon: inputDecoration.icon,
      labelText: inputDecoration.labelText,
      labelStyle: inputDecoration.labelStyle,
      helperText: inputDecoration.helperText,
      helperStyle: inputDecoration.helperStyle,
      helperMaxLines: inputDecoration.helperMaxLines,
      hintText: inputDecoration.hintText,
      hintStyle: inputDecoration.hintStyle,
      hintMaxLines: inputDecoration.hintMaxLines,
      errorText: inputDecoration.errorText ?? errorText,
      errorStyle: inputDecoration.errorStyle,
      errorMaxLines: inputDecoration.errorMaxLines,
      hasFloatingPlaceholder: inputDecoration.hasFloatingPlaceholder,
      floatingLabelBehavior: inputDecoration.floatingLabelBehavior,
      isCollapsed: inputDecoration.isCollapsed,
      isDense: inputDecoration.isDense,
      contentPadding: inputDecoration.contentPadding,
      prefixIcon: inputDecoration.prefixIcon,
      prefixIconConstraints: inputDecoration.prefixIconConstraints,
      prefix: inputDecoration.prefix,
      prefixText: inputDecoration.prefixText,
      prefixStyle: inputDecoration.prefixStyle,
      suffixIcon: inputDecoration.suffixIcon,
      suffix: inputDecoration.suffix,
      suffixText: inputDecoration.suffixText,
      suffixStyle: inputDecoration.suffixStyle,
      suffixIconConstraints: inputDecoration.suffixIconConstraints,
      counter: inputDecoration.counter,
      counterText: inputDecoration.counterText,
      counterStyle: inputDecoration.counterStyle,
      filled: inputDecoration.filled,
      fillColor: inputDecoration.fillColor,
      focusColor: inputDecoration.focusColor,
      hoverColor: inputDecoration.hoverColor,
      errorBorder: inputDecoration.errorBorder,
      focusedBorder: inputDecoration.focusedBorder,
      focusedErrorBorder: inputDecoration.focusedErrorBorder,
      disabledBorder: inputDecoration.disabledBorder,
      enabledBorder: inputDecoration.enabledBorder,
      border: inputDecoration.border,
      enabled: inputDecoration.enabled,
      semanticCounterText: inputDecoration.semanticCounterText,
      alignLabelWithHint: inputDecoration.alignLabelWithHint,
    );
  }
}
